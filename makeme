#!/usr/bin/env bash

# Define variables
_execDir="$(dirname "$(readlink -f "$0")")"
_buildCacheRoot="${_execDir}/out"
_buildCache="${_buildCacheRoot}/gearlock"
_buildCacheInstallerDir="${_buildCacheRoot}/gri"
_buildInstallerOut="${_buildCacheRoot}/build_installer_out"
_installerSrc="${_execDir}/installer"

# Define functions
function gslr() {
	if test -n "$1" && test -n "$2" && test -n "$3"; then
		LII="$(grep -n "$2" "$1" | head -n1 | cut -d : -f1)";
		if test -n "$LII"; then
			LI="$(echo -e "$LII" | awk '{print $1}')";
			sed -i "${LI}s/.*/${3}/" "$1";
		else
			RETC=$?
			echo -e "~ Error [gslr:$RETC], could not find any line containing ${RED}$2${RC}" && return $RETC
		fi;
	else
		if test -z "$NPUT"; then
			echo -e "~ Error [gslr:3], lack of input" && return 1
		fi;
	fi
};

function handleError ()
{
	_errorCode="${2:-$?}"
	echo -e "Error code ~ ${_errorCode} : $1" && exit ${_errorCode}

};

function mkInstaller ()
{
	rm -rf "${_buildInstallerOut}"; mkdir -p "${_buildInstallerOut}"
	local GARCA="${_installerSrc}/packer-engine/garca"
	rsync -a "${_execDir}/installer/packer-engine/bash" "${_execDir}/installer/packer-engine/busybox" "${_buildCacheInstallerDir}"
	"$GARCA" a -m0=zstd "$3" -sfx "$1" "$2"
	return $?
};

function main ()
{
		
	# Define core vars
	local _buildVariant="$1"
	local _compressionLevel="$2"
		
	echo -e "Start of GearLock $(cat "${_execDir}"/core/version) build\n"
		
	# Clean & remake _buildCacheRoot|_buildCache
	test -e "${_buildCacheRoot}" && rm -r "${_buildCacheRoot}"
	mkdir -p "${_buildCacheRoot}" "${_buildCache}" || handleError "Failed 'mkdir ${_buildCache}'"
		
	# Copy raw files into _buildCache
	echo -e "Copying raw files into ${_buildCache}"
	cd "${_execDir}" && rsync -a --info=progress2 bin core etc lib libexec share usr "${_buildCache}" || handleError "Failed to copy files into ${_buildCache}\'"
		
	# Change dir to _buildCache
	cd "${_buildCache}"
	mkdir ${_extraPlaceHolderDirs=tmp gearroot} && chmod 755 ${_extraPlaceHolderDirs} || handleError "Failed \'mkdir/chmod ${_extraPlaceHolderDirs}\'"
		
	# Re-configure/fix shebangs in bin & remove `gearlock/bin`
	echo -e "Removing ${cExternal:=core/_external_}"
	rm -r ${cExternal}; test "$?" != "0" && handleError "Failed to \'rm -r ${cExternal}\'" && exit 1
	#rm -f "${_buildCache}/bin/bashbox" "${_buildCache}/bin/mkrecovery.multi"
	
	echo -e "Fixing shebangs"
	# Look for `#/bin/bash`
	for f in $(grep "#\!/bin/bash" -lr bin | xargs);
	do
		gslr "$f" "#\!/bin/bash" "#\!\/gearlock\/bin\/bash" || handleError "Failed to replace shebangs with gslr"
	done;
		
	
	# Optimize/Syntax-check source code
	echo -e "Checkig source code syntax"
	file_list=($(awk 'NF' "${_execDir}/source_files" | sed '/#.*/d')) || handleError "Failed to read source_files"
	for f in "${file_list[@]}"; do
		echo "\"${_buildCache}/$f\"" >> "${_buildCacheRoot}/.source_files"
	done
	chmod +x "${_execDir}/bin/bashbox"
	STRICT="true" bash "${_execDir}/bin/bashbox" $(xargs < "${_buildCacheRoot}/.source_files") || handleError "Syntax errors found, can not continue"
	readarray -d '' optim_gen_list < <(find "${_buildCache}/bin" "${_buildCache}/core" -name '*.bb.sh' -print0)
	for gen_list in "${optim_gen_list[@]}"; do
		#mv "$gen_list" "${gen_list%.bb.sh}"
		rm "$gen_list"
	done
	
	# Recursive Chmod 755 _buildCache
	echo -e "Setting permissions to 755 recursively for cpio image"
	chmod -R 755 "${_buildCache}" || handleError "Failed to \'chmod -R 755 ${_buildCache}\'"
		
	# Make cpio archive of `gearlock` ~~ cd into _buildCacheRoot
	test "$2" == '-p' && read -p "Press [Enter] to continue" readEnterKey
	echo -e "Making cpio archive of gearlock directory: \c"
	cd "${_buildCacheRoot}" || handleError "Failed to cd ${_buildCacheRoot}"
	mkdir -p "${_buildCacheInstallerDir}" || handleError "Failed to mkdir ${_buildCacheInstallerDir}"
	find gearlock | cpio --owner=root:root -o -H newc -O "${_buildCacheInstallerDir}/gearlock"
		
	# Merge files from _installerSrc into _buildCacheInstallerDir
	echo -e "Merging files from ${_installerSrc} into ${_buildCacheInstallerDir}"
	local installerSrcFiles=(
	"${_installerSrc}/bin"
	"${_installerSrc}/hook"
	"${_installerSrc}/sp"
	"${_installerSrc}/fx.apk"
	"${_installerSrc}/install"
	"${_execDir}/core/version"
    )
    
	for files in "${installerSrcFiles[@]}"; do
		rsync -a "${files}" "${_buildCacheInstallerDir}"
	done

		
	# Make ghome empty dirs
	for folders in ghome ghome/dependencies ghome/extensions ghome/status ghome/unins ghome/gearboot \
	${gd:=ghome/gearboot}/boot-comp $gd/boot-post $gd/init $gd/post-fs $gd/post-fs-data; do mkdir -p "${_buildCacheInstallerDir}/$folders"; done
	# Copy extra ghome subdirs
# 	rsync -a "${_installerSrc}/extensions" "${_installerSrc}/.config" "${_installerSrc}/.local" "${_buildCacheInstallerDir}/ghome"
	chmod -R 755 "${_buildCacheInstallerDir}" 
		
	# Create self executable gearlock installer
	echo -e "Making executable GearLock Installer: \c"
	! mkInstaller "${_buildInstallerOut}"/gearlock gri "${_compressionLevel}" > /dev/null 2>&1 && handleError "Making of gearlock installer failed"
	ls -lh "${_buildInstallerOut}" | grep gearlock | awk '{print $5}'
		
	# Make bootinstall-initrd.img
	echo -e "Making initrd.img-bootinstall image: \c"
	"${_installerSrc}/boot-installer/makeme" "${_buildInstallerOut}/bootinstall-initrd.img"
};

function patch.aosp_root() {
	local aosp_root
	aosp_root="$(pwd)" || handleError "Failed to locate \$aosp_root"
	files_to_patch=(
		"device/generic/common/device.mk"
		"bootable/newinstaller/Android.mk"
		"bootable/newinstaller/initrd/init"
		"bootable/newinstaller/install/scripts/1-install"
		"bootable/newinstaller/install/grub2/efi/boot/android.cfg"
	)
	
	function patch.apply() {
		local FILE="$1"
		echo -e "==== Applying GearLock patches to $FILE"
		case "$FILE" in
			"${files_to_patch[0]}")
				gslr "$aosp_root/$FILE" \
					'PRODUCT_COPY_FILES := \\' \
					'PRODUCT_COPY_FILES := \\\n    bootable\/gearlock\/out\/gri\/gearlock:gearlock \\' \
				|| handleError "Failed to patch $aosp_root/$FILE"
				;;
				
			"${files_to_patch[1]}")
				line="$(grep -n 'BUILT_IMG.*:=.*$(.*)' "$aosp_root/$FILE" | head -n1 \
						| sed 's|/|\\/|g; s|initrd.img|initrd.img gearlock|')"
						
				sed -i "${line%%:*}s/.*/${line#*:}/" "$aosp_root/$FILE" \
				|| handleError "Failed to patch $aosp_root/$FILE"
				;;
				
			"${files_to_patch[2]}")
				gslr "$aosp_root/$FILE" "mount_sdcard" "mount_sdcard; hook_gearinit" \
				|| handleError "Failed to patch $aosp_root/$FILE"
				;;
				
			"${files_to_patch[3]}")
				line="$(grep -n 'files=.*".*initrd.img.*"' "$aosp_root/$FILE" | head -n1 \
						| sed 's|initrd.img|initrd.img /mnt/$SRC/gearlock|; s|/|\\/|g')"
						
				sed -i "${line%%:*}s/.*/${line#*:}/" "$aosp_root/$FILE" \
				|| handleError "Failed to patch $aosp_root/$FILE"
				;;
				
			"${files_to_patch[4]}")
				sed -i 's/add_entry.*$/& NORECOVERY=1/g' "$aosp_root/$FILE"
				sed -i 's|submenu "Advanced options -> " {|submenu "Advanced options -> " {\
	add_entry "$live - Boot into GearLock recovery mode" ALWAYSRECOVERY=1\
	add_entry "$live - Boot into GearLock recovery mode with NOGFX=1 flag" ALWAYSRECOVERY=1 NOGFX=1\
	add_entry "$live - Boot with Auto-ExtFs-Repair flag" quiet FIXFS=0|' "$aosp_root/$FILE"
				;;
		esac
		(
			cd "$aosp_root/${FILE%/*}" || handleError "Failed to change dir to $aosp_root/${FILE%/*}"
			git commit -a -m "Update/apply GearLock patches for $FILE" --author="AXON <axonasif@gmail.com>" 1>/dev/null
		)
	}
	
	# Start with updating/placing hook script
	local HOOK_PATH="$aosp_root/bootable/newinstaller/initrd/scripts/0-hook"
	rsync "$_execDir/installer/hook" "$HOOK_PATH" || handleError "Failed to copy hook into $HOOK_PATH"
	
	# Now let's find which files we need to patch
	for _file in "${files_to_patch[@]}"; do
		! grep -i -E -q 'gearlock|gearinit' "$aosp_root/$_file" \
			&& patch.apply "$_file"
	done
}

case "$1" in

	--aosp)
		patch.aosp_root
		main "-mx23" ""
		;;
	*)
		main ${1:-"-mx23"} ${2:-""}
		;;

esac
