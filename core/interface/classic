test -z "$ME" && exit 1;export IT=classic

# Interface structure
logo(){ gecca $CORE/interface/assets/classic/header; }
show_header(){ echo -e "${BLUE}\c"; "$1"; echo -e "${RC}\c"; }
show_menu_container(){ echo -e; gecpc "Gear It" "@"; gecpc "+" "-"; "$1"; gecpc "_" "_"; gecpc "=" "@"; echo -e; }
show_footer(){ echo -e "${ORANGE}\c"; "$1"; echo -e "${RC}\c"; }
inload_one(){ [ ! -z "$1" ] && "$1"; }; inload_two(){ [ ! -z "$1" ] && "$1"; }; inload_three(){ [ ! -z "$1" ] && "$1"; }
struct_interface_inload(){ export src="$1"; show_header "$2"; show_menu_container "$3"; show_footer "$4"; inload_one "$5";  inload_two "$6"; inload_three "$7"; }

# Common
com_body(){ i=1 && echo -e; while read line; do echo -e "${YELLOW}" && echo [$((i++))]. $line; done < "$CORE/${src}/_lang_/_menu_${lang}" > "${t:="$GTMP/_cmenu"}" && gecca "$t" && echo -e "${RC}\n"; }
com_footer(){
gecpc "${_footer_items_classicui_}" "_"
check_sc && echo -e "\n- ${_supercharging_notice_}"
[ -e "$STATDIR/update" ] && [ "$UPDATE_CHECK" != "no" ] && echo -e "\n${_new_update_notice_}"

}; com_sub_footer(){ gecpc "${_sub_footer_items_}" "_"; }

com_rinput(){
    echo -e; read -n1 -p "$(echo -e "${BGREEN}${_footer_input_prompt_classicui_} >> ${RC}\c")" "c"; echo -e
    case $c in
        a) geco "${_ui_about_msg_}" && pause ;;
        h) clear && geco "${_ui_help_msg_}" && pause ;;
        d) $CORE/devz; pause ;;
        r) echo -e "\n+ ${_gearrec_info_}"; pause ;;
        u) clear && $CORE/updater; pause ;;
        c) $CORE/settings ;;
        s) gstatus; pause ;;
        g) echo -e "\n- ${_googleless_mode_info_}\n"
        select opt in "Activate it" "Deactivate it" "Exit"; do case $opt in "Activate it") pm disable com.android.vending; pm disable com.google.android.gms; touch $GTMP/goolm ;; "Deactivate it") nout pm enable com.android.vending; nout pm enable com.google.android.gms; nout rm $GTMP/goolm ;; "Exit") break; ;; esac; break; done; echo -e "\n+ Done!"; pause ;;
        x) echo -e "\nSee ya later!"; sleep 3; exit_grl ;;
        *) if [ -z "$c" ]; then echo -e "${_noinput_classicui_} ..."; pause
        else if [ -e "$CORE/$src/$c" ]; then clear && $CORE/$src/$c
        else echo -e "\n${_wronginput_classicui_} ¯\(ツ)/¯"; pause; fi; fi
    esac
}
com_sub_rinput(){
    echo -e; read -p "${_footer_input_prompt_classicui_} >> " c; echo -e
    case $c in
        b) exit 0 ;;
        *) if [ -z "$c" ]; then echo -e "${_noinput_classicui_} ..."; pause
        else if [ -e "$CORE/$src/$c" ]; then clear && $CORE/$src/$c; pause; else echo -e "${_wronginput_classicui_} ¯\(ツ)/¯"; pause; fi; fi
    esac
}

# Export fun
export -f logo show_header show_menu_container show_footer inload_one inload_two inload_three struct_interface_inload com_body com_footer com_sub_footer com_sub_rinput

# Runtime
struct_interface main.src logo com_body com_footer com_rinput
